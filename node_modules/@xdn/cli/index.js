#!/usr/bin/env node
"use strict";

const importLocal = require('import-local');

const {
  XdnCLIError
} = require('./utils/errors');

(function main() {
  if (importLocal(__filename)) {
    // We use the locally installed version from package.json if available. This lets the user
    // have different versions of the cli for each project without needing to `npm run xdn` for
    // all commands. If we get here importLocal has successfully found and run the local version
    // of the CLI so we can just return.
    return;
  }

  const yargs = require('yargs');

  const chalk = require('chalk');

  const Context = require('./utils/context');

  const isCI = require('is-ci');

  const initContext = async argv => ({
    context: new Context(argv)
  });

  yargs.middleware(initContext).commandDir('commands').option('api-url', {
    type: 'string',
    description: 'XDN 2.0 Console URL',
    default: 'https://moovweb.app'
  }).options('token', {
    type: 'string',
    description: 'Authenticate with a specific site deploy token.'
  }).option('verbose', {
    alias: 'v',
    type: 'boolean',
    description: 'Run with verbose logging'
  }).options('non-interactive', {
    alias: 'ni',
    type: 'boolean',
    description: 'Runs the command without user interaction. Default to false, except when a known CI env variable is detected',
    default: isCI
  }).strict().completion('completion', 'Generates a script that you can add to your shell to enable autocompletions for the xdn command').demandCommand().fail((msg, err, yargs) => {
    try {
      if (err) {
        // XdnCLIErrors occur in a normal user workflow
        // (failed sign-in, team slug not found, javascript build failure, etc...)
        // in which case we don't want to display a stack trace but just a specific error message
        if (err instanceof XdnCLIError) {
          console.error(chalk.red.bold(`Error: ${err.message}`));

          if (err.errorDetails) {
            console.error(chalk.red(err.errorDetails));
          }
        } else {
          // Default error outputs otherwise
          console.error(err);
        }

        return;
      }

      console.log(yargs.help());
      console.log(msg);
    } catch (e) {
      // Any error thrown into fail() callback would be silenced so we make sure
      // nothing pops out
      console.error('Error in .fail():', err);
    } finally {
      process.exit(1);
    }
  }).showHelpOnFail(false).argv;
})();