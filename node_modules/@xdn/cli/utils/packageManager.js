"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isYarn = isYarn;
exports.runNodePackageManagerScript = runNodePackageManagerScript;
exports.installDependencies = installDependencies;

var _ora = _interopRequireDefault(require("ora"));

var _chalk = _interopRequireDefault(require("chalk"));

var _path = require("path");

var _isPackageInstalled = _interopRequireDefault(require("../frameworks/isPackageInstalled"));

var _fs = require("fs");

var _run = _interopRequireDefault(require("./run"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns if the user is using yarn or npm based on the lock file
 */
function isYarn() {
  return (0, _fs.existsSync)((0, _path.join)(process.cwd(), 'yarn.lock'));
}
/**
 * Runs npm or yarn command with args based on the package manager used
 * @param {String[]} commandArgs
 */


function runNodePackageManagerScript(commandArgs = [], {
  stdio
}) {
  const command = isYarn() ? 'yarn' : 'npm';
  return (0, _run.default)(command, commandArgs, {
    stdio
  });
}
/**
 * Installs packages if they are not already installed.
 * @param {Object} libs The libs to install.  Keys are the names of node packages and values are versions
 * @param {Object} options
 * @param {Object} options.dev If true, the libs will be installed as devDependencies.
 * @return {Promise}
 */


async function installDependencies(libs, {
  dev = false,
  overrideInstalled = false
} = {}) {
  const toInstall = [],
        packageNames = [],
        commandArgs = [];

  for (let lib in libs) {
    if (!(0, _isPackageInstalled.default)(lib) || overrideInstalled) {
      packageNames.push(lib);
      toInstall.push(`${lib}@${libs[lib]}`);
    }
  }

  if (toInstall.length === 0) return Promise.resolve();
  const message = `installing ${_chalk.default.green(packageNames.join(', '))}...`;
  const spinner = (0, _ora.default)();
  spinner.info(message);

  if (isYarn()) {
    commandArgs.push('add');
    dev && commandArgs.push('--dev');
  } else {
    commandArgs.push('install');
    commandArgs.push(dev ? '--save-dev' : '--save');
  }

  try {
    await runNodePackageManagerScript([...commandArgs, ...toInstall], {
      stdio: 'inherit'
    });
    spinner.succeed(`${message} done.`);
    return Promise.resolve();
  } catch (e) {
    spinner.fail(`${message} failed.`);
    console.error(e);
    return Promise.reject(e);
  }
}