"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var runWhenVisible_1 = __importDefault(require("./runWhenVisible"));
var observer;
var watchConfigs = new Set();
/**
 * Sets up observers to watch for elements matching the list of selectors, then
 * perform the given callback when an element becomes visible
 * @param {PrefetchWatcherConfig[]} configArr Contains the list of selector/callback pairs
 */
function watchElements(configArr) {
    /* istanbul ignore next */
    if (typeof MutationObserver === 'undefined')
        return;
    if (!configArr || !configArr.length)
        return;
    configArr.forEach(function (watch) { return watchConfigs.add(watch); });
    if (!observer) {
        observer = new MutationObserver(function (mutationsList) {
            var e_1, _a;
            var _loop_1 = function (mutation) {
                ;
                __spread(watchConfigs).forEach(function (watch) {
                    filterBySelector(mutation.addedNodes, watch.selector).forEach(function (match) {
                        return runWhenVisible_1.default(match, watch.callback);
                    });
                });
            };
            try {
                for (var mutationsList_1 = __values(mutationsList), mutationsList_1_1 = mutationsList_1.next(); !mutationsList_1_1.done; mutationsList_1_1 = mutationsList_1.next()) {
                    var mutation = mutationsList_1_1.value;
                    _loop_1(mutation);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (mutationsList_1_1 && !mutationsList_1_1.done && (_a = mutationsList_1.return)) _a.call(mutationsList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    observer.observe(document.body, {
        subtree: true,
        childList: true,
    });
    configArr.forEach(function (watch) {
        document.querySelectorAll(watch.selector).forEach(function (match) {
            var el = match;
            runWhenVisible_1.default(el, watch.callback);
        });
    });
}
exports.default = watchElements;
/**
 * Returns all nodes in the node list that match one of the given selectors
 * @param {NodeList} nodes A node list to filter
 * @param {String} selector Selector used to match elements
 */
function filterBySelector(nodes, selector) {
    var results = new Set();
    Array.from(nodes).forEach(function (n) {
        if (n.nodeType === Node.ELEMENT_NODE) {
            var el = n;
            if (el.matches(selector)) {
                results.add(el);
            }
            else {
                var matches = el.querySelectorAll(selector);
                matches.forEach(function (match) { return results.add(match); });
            }
        }
    });
    return results;
}
