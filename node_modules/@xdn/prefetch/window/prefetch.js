"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var waitForServiceWorker_1 = __importDefault(require("./waitForServiceWorker"));
var constants_1 = require("@xdn/core/constants");
var getHostName_1 = __importDefault(require("./getHostName"));
// According to Fastly, 2^13 (8192) is the max number of bytes allowed for a URL:
var MAX_URL_BYTES = Math.pow(2, 13);
var prefetched = new Set();
var defaults = {
    includeCacheMisses: false,
    cacheHost: undefined,
    spaRoutes: [],
    forcePrefetchRatio: 0,
};
var options = defaults;
/**
 * Configures prefetching options
 * @param opts
 */
function configure(opts) {
    options = __assign(__assign({}, defaults), opts);
}
exports.configure = configure;
/**
 * Prefetches and caches the specified URL.
 *
 * **Example**
 *
 * ```js
 * import { prefetch } from '@xdn/prefetch/window
 *
 * prefetch('/some/url')
 * ```
 * @param {String} url The URL to prefetch
 * @param {String} as Value to use for the "as" attribute of the <link> tag
 * @param {PrefetchConfiguration} config Options to use for the prefetch
 */
function prefetch(url, as, config) {
    if (as === void 0) { as = 'fetch'; }
    if (config === void 0) { config = { cors: 'anonymous' }; }
    return __awaiter(this, void 0, void 0, function () {
        var cacheUrl, link, relList;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (typeof config.cors === 'undefined') {
                        config.cors = 'anonymous';
                    }
                    cacheUrl = modifyUrl(url, config);
                    if (typeof TextEncoder !== 'undefined' &&
                        new TextEncoder().encode(cacheUrl).length > MAX_URL_BYTES) {
                        console.warn("URL is too many characters to prefetch and cache: " + cacheUrl);
                        return [2 /*return*/];
                    }
                    if (prefetched.has(cacheUrl)) {
                        return [2 /*return*/];
                    }
                    prefetched.add(cacheUrl);
                    return [4 /*yield*/, waitForServiceWorker_1.default()];
                case 1:
                    _a.sent();
                    link = document.createElement('link');
                    relList = link.relList;
                    link.setAttribute('href', cacheUrl);
                    if (config.cors) {
                        link.setAttribute('crossorigin', config.cors);
                    }
                    link.setAttribute('rel', relList.supports('preload') && /* istanbul ignore next */ !relList.supports('prefetch')
                        ? /* istanbul ignore next */ 'preload'
                        : 'prefetch' // Safari does not support prefetch so we use preload instead
                    );
                    link.setAttribute('as', as);
                    document.head.append(link);
                    return [2 /*return*/];
            }
        });
    });
}
exports.prefetch = prefetch;
function modifyUrl(url, config) {
    var body = config.body, _a = config.headers, headers = _a === void 0 ? {} : _a;
    var parsed = new URL(url, window.origin);
    maybeAddHeadParam(parsed);
    if (parsed.hostname === getHostName_1.default()) {
        // If we are prefetching from the XDN sidecar, rewrite the URL to use the sidecar's domain name
        if (options.cacheHost) {
            var cacheHostUrl = new URL("https://" + options.cacheHost);
            parsed.hostname = cacheHostUrl.hostname;
            parsed.protocol = cacheHostUrl.protocol;
            parsed.port = cacheHostUrl.port;
        }
        maybeAddPrefetchParam(parsed);
    }
    if (body) {
        parsed.searchParams.append(constants_1.POST_BODY_QUERY_PARAM, body);
    }
    if (Object.keys(headers).length) {
        parsed.searchParams.append(constants_1.PREFETCH_HEADERS_QUERY_PARAM, JSON.stringify(headers));
    }
    return parsed.toString();
}
/**
 * Adds the query param that indicates to the service worker that a request is a prefetch.
 * @param url
 */
function maybeAddPrefetchParam(url) {
    if (!options.includeCacheMisses && shouldAcceptThrottling()) {
        url.searchParams.append(constants_1.PREFETCH_QUERY_PARAM, '1');
    }
}
/**
 * Returns true if the next prefetch request should only be served from the edge cache.
 * This is done by comparing a random number between 0 and 1 to options.forceFrefetchRatio
 */
function shouldAcceptThrottling() {
    return !options.forcePrefetchRatio || Math.random() > options.forcePrefetchRatio;
}
function maybeAddHeadParam(url) {
    options.spaRoutes.forEach(function (routePattern) {
        if (routePattern.test(url.pathname)) {
            url.searchParams.append(constants_1.HEAD_QUERY_PARAM, '1');
            return;
        }
    });
}
