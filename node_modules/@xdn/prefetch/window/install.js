"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var prefetch_1 = require("./prefetch");
var registerServiceWorker_1 = require("./registerServiceWorker");
var indicator_1 = __importDefault(require("./indicator"));
var watchLinks_1 = __importDefault(require("./watchLinks"));
var loadManifest_1 = __importDefault(require("./loadManifest"));
var watchElements_1 = __importDefault(require("./watchElements"));
var defaults = {
    includeCacheMisses: false,
    cacheHost: undefined,
    forcePrefetchRatio: 0,
};
/**
 * Installs the service worker, prefetches any URLs specified in `prefetchURLs` and watches
 * all links whose `href` attribute matches one of the specified `prefetchPatterns`.  When
 * a matching link is visible in the viewport, the destination URL will be prefetched and
 * added to the cache.
 * @param options
 */
function install(options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var spaRoutes, serviceWorker, prefetchURLs, watch, _c, serviceWorkerPath, cacheManifest, prefetchPatterns, cacheManifest_1, cacheManifest_1_1, _d, route, cacheOptions;
        var e_1, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    options = __assign(__assign({}, defaults), options);
                    spaRoutes = [];
                    serviceWorker = navigator.serviceWorker;
                    if (typeof serviceWorker === 'undefined') {
                        return [2 /*return*/];
                    }
                    prefetchURLs = options.prefetchURLs, watch = options.watch, _c = options.serviceWorkerPath, serviceWorkerPath = _c === void 0 ? '/service-worker.js' : _c;
                    return [4 /*yield*/, loadManifest_1.default({ cacheHost: options.cacheHost })
                        // @ts-ignore
                    ];
                case 1:
                    _f.sent();
                    cacheManifest = window.__XDN_CACHE_MANIFEST__ || [];
                    prefetchPatterns = __spread((options.prefetchPatterns || []));
                    try {
                        for (cacheManifest_1 = __values(cacheManifest), cacheManifest_1_1 = cacheManifest_1.next(); !cacheManifest_1_1.done; cacheManifest_1_1 = cacheManifest_1.next()) {
                            _d = cacheManifest_1_1.value, route = _d.route, cacheOptions = _d.cacheOptions;
                            if (((_a = cacheOptions.browser) === null || _a === void 0 ? void 0 : _a.serviceWorkerSeconds) > 0 && ((_b = cacheOptions.edge) === null || _b === void 0 ? void 0 : _b.maxAgeSeconds) > 0) {
                                if (cacheOptions.browser.spa) {
                                    spaRoutes.push(new RegExp(route, 'i'));
                                }
                                prefetchPatterns.push(new RegExp(route, 'i'));
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (cacheManifest_1_1 && !cacheManifest_1_1.done && (_e = cacheManifest_1.return)) _e.call(cacheManifest_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    prefetch_1.configure(__assign(__assign({}, options), { spaRoutes: spaRoutes }));
                    if (process.env.DEBUG_SW) {
                        document.body.appendChild(indicator_1.default());
                    }
                    // install the service worker
                    registerServiceWorker_1.registerServiceWorker(serviceWorkerPath);
                    // prefetch requested URLs
                    prefetchURLs === null || prefetchURLs === void 0 ? void 0 : prefetchURLs.forEach(function (url) { return prefetch_1.prefetch(url); });
                    // watch links currently in the DOM as well as any links that are added in the future
                    watchLinks_1.default(prefetchPatterns);
                    watchElements_1.default(watch);
                    serviceWorker.addEventListener('message', function (event) {
                        if (event.data.action === 'prefetch') {
                            prefetch_1.prefetch(event.data.url, event.data.as, event.data.options);
                        }
                    });
                    return [2 /*return*/];
            }
        });
    });
}
exports.default = install;
