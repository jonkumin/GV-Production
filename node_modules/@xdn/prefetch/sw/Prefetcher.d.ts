import { WorkboxPlugin } from 'workbox-core/types';
export declare class Stats {
    hits: number;
    misses: number;
}
export interface PrefetcherConfig {
    /**
     * Workbox plugins to use when handling a cacheable route.
     */
    plugins: WorkboxPlugin[];
    /**
     * An optional second domain from which to prefetch instead of the origin domain.
     */
    cacheHost?: string;
}
/**
 * Handles prefetching and caching in the the service worker.  Responses
 * are cached based on the `browser.serviceWorkerSeconds` cache setting in your routes.
 *
 * **Example routes.js**
 *
 * ```js
 *  import { Router } from '@xdn/core/router'
 *
 *  module.exports = new Router()
 *    .match('/some/path', ({ cache }) => {
 *      cache({
 *        edge: {
 *          maxAgeSeconds: 60 * 60 * 24 // one day
 *        },
 *        browser: {
 *          serviceWorkerSeconds: 60 * 60 // one hour
 *        }
 *      })
 *    })
 * ```
 *
 * **Example Service Worker**
 *
 * ```js
 *  import { skipWaiting, clientsClaim } from 'workbox-core'
 *  import { Prefetcher } from '@xdn/prefetch/sw'
 *  import { precacheAndRoute } from 'workbox-precaching'
 *
 *  skipWaiting()
 *  clientsClaim()
 *  precacheAndRoute(self.__WB_MANIFEST || [])
 *
 *  new Prefetcher().route()
 * ```
 */
export default class Prefetcher {
    private readonly cacheableResponsePlugin;
    private readonly config;
    private readonly cacheHost?;
    private readonly stats;
    constructor(config?: PrefetcherConfig);
    /**
     * Adds a fetch event listener that serves content from the cache when available.  When
     * a request is not in the cache, it will be fetched from the network and added to the
     * cache if the route has `browser.serviceWorkerSeconds` defined in its `cache` setting.
     */
    route(): this;
    cache(pattern: RegExp, maxAgeSeconds?: number): this;
    /**
     * Starts listening for messages from the browser
     */
    private initStats;
    /**
     * If there's a cacheHost configured check whether the pattern to test
     * against is a partial pathname pattern. If so, check that the origin is
     * the same as the cacheHost
     * @param pattern A route pattern
     * @param isPartialPathRoute Set to true if the supplied pattern only matches the path, false if it matches the whole URL.
     * @return true if the request should be handled by the service worker.
     */
    private shouldIntercept;
    /**
     * Creates a workbox route.
     * @param pattern The route pattern
     * @param options The caching options specified within the route definition
     * @param origMethod If originally called with options.method !== 'GET', this value
     *  is passed to ensure that a ChangeMethodPlugin is added for the registered GET route
     */
    private createRoute;
    private incrementHits;
    private incrementMisses;
}
