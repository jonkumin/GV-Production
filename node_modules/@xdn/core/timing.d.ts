declare global {
    module NodeJS {
        interface Global {
            __xdn_timings__: Timing[];
        }
    }
}
/**
 * Allows you to track the performance of your code and asynchronous operations such as fetches.
 * Timings will be returned as a comma delimited list in the `x-xdn-user-t` header.
 *
 * ** Example **
 *
 * ```js
 * import Timing from '@xdn/core/timing'
 *
 * const timing = new Timing('fetch').start()
 * const result = await fetch('http://my-api.com/products/1')
 * timing.end() // will result in `x-xdn-user-t: fetch=(millis)` response header
 * ```
 *
 * If a timing is started but not finished by the time the response is sent, the value will be `na`.
 */
export default class Timing {
    readonly name: string;
    startTime?: Date;
    endTime?: Date;
    /**
     * @param name The name of the timing component that will be reported in the `x-xdn-user-t` header
     */
    constructor(name: string);
    /**
     * Starts the timing.
     * @returns A self-reference, suitable for chaining
     */
    start(): this;
    /**
     * Ends the timing.
     * @returns A self-reference, suitable for chaining
     */
    end(): this;
}
/**
 * Removes all timings associated with the current request.
 * @private
 */
export declare function resetTimings(): void;
/**
 * Gets the value of the x-xdn-user-t header.
 * @private
 */
export declare function getTimingsResponseHeader(): string | undefined;
