"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
if (!global.__xdn_timings__) {
    global.__xdn_timings__ = [];
}
var timings = global.__xdn_timings__;
/**
 * Allows you to track the performance of your code and asynchronous operations such as fetches.
 * Timings will be returned as a comma delimited list in the `x-xdn-user-t` header.
 *
 * ** Example **
 *
 * ```js
 * import Timing from '@xdn/core/timing'
 *
 * const timing = new Timing('fetch').start()
 * const result = await fetch('http://my-api.com/products/1')
 * timing.end() // will result in `x-xdn-user-t: fetch=(millis)` response header
 * ```
 *
 * If a timing is started but not finished by the time the response is sent, the value will be `na`.
 */
var Timing = /** @class */ (function () {
    /**
     * @param name The name of the timing component that will be reported in the `x-xdn-user-t` header
     */
    function Timing(name) {
        this.name = name;
    }
    /**
     * Starts the timing.
     * @returns A self-reference, suitable for chaining
     */
    Timing.prototype.start = function () {
        this.startTime = new Date();
        timings.push(this);
        return this;
    };
    /**
     * Ends the timing.
     * @returns A self-reference, suitable for chaining
     */
    Timing.prototype.end = function () {
        this.endTime = new Date();
        return this;
    };
    return Timing;
}());
exports.default = Timing;
/**
 * Removes all timings associated with the current request.
 * @private
 */
function resetTimings() {
    timings.length = 0;
}
exports.resetTimings = resetTimings;
/**
 * Gets the value of the x-xdn-user-t header.
 * @private
 */
function getTimingsResponseHeader() {
    if (!timings.length)
        return undefined;
    return timings
        .map(function (t) {
        var value = t.startTime && t.endTime ? t.endTime.getTime() - t.startTime.getTime() : 'na';
        return t.name + "=" + value;
    })
        .join(',');
}
exports.getTimingsResponseHeader = getTimingsResponseHeader;
