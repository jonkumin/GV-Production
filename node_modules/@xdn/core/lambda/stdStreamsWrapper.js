"use strict";
/*
 * Wrap the stdout/stderr write function to get a JSON output with request metadata
 * when we are running as a lambda
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var environment = require('../environment');
var consoleWrapper_1 = __importStar(require("./consoleWrapper"));
var xdnOriginalOutputs = {
    stdoutWrite: process.stdout.write,
    stderrWrite: process.stderr.write,
};
var PINO_ERROR_LEVEL = 50;
var PINO_INFO_LEVEL = 30;
var xdnEnabledCount = 0;
var xdnEnabledClientIp = null;
var JSON_LOG_IDENTIFIER = JSON.stringify(consoleWrapper_1.awsCloudWatchTag).replace('{', '').replace('}', '');
/**
 * Check if this log is already wrapped into a json payload
 * @param log
 */
function isXdnJsonLog(log) {
    return log.indexOf(JSON_LOG_IDENTIFIER) >= 0;
}
/**
 * Overrides the given stream #write method so that every chunk
 * of text sent to that function is wrapped into a JSON object
 * as a 'msg' attribute.
 * The rest of the JSON object is defined by baseJsonObject
 *
 * @param stream Stream to override
 * @param baseJsonObject JSON object into which we inject the stream message
 */
function jsonifyWriteStream(stream, baseJsonObject) {
    var originalWrite = stream.write;
    // @ts-ignore
    stream.write = function (chunk) {
        var otherArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            otherArgs[_i - 1] = arguments[_i];
        }
        // Converts Buffer or Uint8Array to string
        if (typeof chunk === 'object') {
            chunk = Buffer.from(chunk).toString();
        }
        //
        if (chunk && !isXdnJsonLog(chunk)) {
            chunk = JSON.stringify(__assign(__assign({}, baseJsonObject), { msg: chunk })) + "\n";
        }
        // @ts-ignore
        return originalWrite.apply(stream, __spread([chunk], otherArgs));
    };
}
var stdStreamsWrapper = {
    /**
     * Wraps console.xxx methods AND standard streams into a JSON payload that will
     * be sent back to the final user in the log streaming interface.
     *
     * Notes:
     * - We have to wrap standard streams because some logging libraries (like 'consola')
     *   writes to those directly without going through console.xxx
     * - We have to wrap console.xxx methods too, as they don't seem to be bound to
     *   standard streams in AWS Lambda Environment. That wrapper (using pino) streams
     *   to process.stdout, leading to the point below.
     * - Both notes above would result in a double json encapsulation when logging via
     *   console.xxx methods. We prevent that in our standard stream wrapper by detecting
     *   a json string that coming from pino logger.
     */
    enable: function (_a) {
        var _b = _a === void 0 ? {} : _a, clientIp = _b.clientIp, requestId = _b.requestId;
        if (!environment.isCloud()) {
            return;
        }
        if (xdnEnabledCount === 0) {
            var basePayload = consoleWrapper_1.awsCloudWatchTag;
            if (clientIp) {
                basePayload = __assign(__assign({}, basePayload), { clientIp: clientIp });
                xdnEnabledClientIp = clientIp;
            }
            if (requestId) {
                basePayload = __assign(__assign({}, basePayload), { requestId: requestId });
            }
            // Wrap standard streams as some
            // As we don't have the same degree of "level" details as console methods, we
            // assign INFO for stdout and ERROR for stderr
            jsonifyWriteStream(process.stdout, __assign({ level: PINO_INFO_LEVEL }, basePayload));
            jsonifyWriteStream(process.stderr, __assign({ level: PINO_ERROR_LEVEL }, basePayload));
            // Wrap console.xxx methods
            consoleWrapper_1.default.enable({ clientIp: clientIp, requestId: requestId });
        }
        else {
            // This case happens locally with serverless-offline, but should NOT happen in AWS Lambda environment
            // where functions are invoked sequentially
            if (xdnEnabledClientIp !== clientIp) {
                // Calling the original logger because we want this log to reach XBP logs - which is wired on lambda stderr and not Cloudwatch -
                // and that will go to moovweb logging and we will be informed
                xdnOriginalOutputs.stderrWrite.apply(process.stderr, ['stdStreamsWrapper with client ip traces cannot be used with concurrent requests']);
            }
            // We don't check the same for request ID as the each request ID will be different.
        }
        xdnEnabledCount++;
    },
    disable: function () {
        if (!environment.isCloud()) {
            return;
        }
        xdnEnabledCount--;
        if (xdnEnabledCount === 0) {
            process.stdout.write = xdnOriginalOutputs.stdoutWrite;
            process.stderr.write = xdnOriginalOutputs.stderrWrite;
            consoleWrapper_1.default.disable();
            xdnEnabledClientIp = null;
        }
    }
};
exports.default = stdStreamsWrapper;
