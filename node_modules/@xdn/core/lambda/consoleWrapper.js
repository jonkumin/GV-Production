"use strict";
/*
 * Wrap the console logging functions with 'pino' JSON logger
 * when we are running as a lambda
 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.awsCloudWatchTag = { awsTag: 'userLogs' };
var util = require('util');
var pino = require('pino');
// The following console function write to stdout,
// but we do not support them when running as Lambda.
// console.count
// console.countReset
// console.dirxml
// console.group
// console.table
// Because the enable() and disable() functions can
// be called multiple, overlapping times, we need to
// put these two variables into a global.
// istanbul ignore else
var xdnOriginalConsole = {
    assert: console.assert,
    debug: console.debug,
    dir: console.dir,
    error: console.error,
    info: console.info,
    log: console.log,
    time: console.time,
    timeEnd: console.timeEnd,
    timeLog: console.timeLog,
    trace: console.trace,
    warn: console.warn,
};
var _timers = {};
var ConsoleWrapper = /** @class */ (function () {
    function ConsoleWrapper() {
    }
    ConsoleWrapper._assert = function (condition) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!condition) {
            console.info.apply(console, __spread(args));
        }
    };
    ConsoleWrapper._dir = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.info(util.inspect.apply(util, __spread(args)));
    };
    ConsoleWrapper._time = function (label) {
        _timers[label] = Date.now();
    };
    ConsoleWrapper._timeEnd = function (label) {
        ConsoleWrapper._timeLog(label);
    };
    ConsoleWrapper._timeLog = function (label) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!_timers[label]) {
            console.warn("Warning: No such label '" + label + "' for console.timeEnd()");
            return;
        }
        var deltaTime = Date.now() - _timers[label];
        _timers[label] = Date.now();
        console.info.apply(console, __spread([label + ": " + deltaTime + "ms"], args));
    };
    ConsoleWrapper.enable = function (_a) {
        var _b = _a === void 0 ? {} : _a, clientIp = _b.clientIp, requestId = _b.requestId;
        _timers = {};
        var logger = pino({
            base: exports.awsCloudWatchTag,
            timestamp: false,
        });
        if (clientIp) {
            logger = logger.child({ clientIp: clientIp });
        }
        if (requestId) {
            logger = logger.child({ requestId: requestId });
        }
        console.assert = ConsoleWrapper._assert;
        console.debug = logger.debug.bind(logger);
        console.dir = ConsoleWrapper._dir;
        console.error = logger.error.bind(logger);
        console.info = logger.info.bind(logger);
        console.log = logger.info.bind(logger);
        console.time = ConsoleWrapper._time;
        console.timeEnd = ConsoleWrapper._timeEnd;
        console.timeLog = ConsoleWrapper._timeLog;
        console.trace = logger.trace.bind(logger);
        console.warn = logger.warn.bind(logger);
    };
    ConsoleWrapper.disable = function () {
        console.assert = xdnOriginalConsole.assert;
        console.debug = xdnOriginalConsole.debug;
        console.dir = xdnOriginalConsole.dir;
        console.error = xdnOriginalConsole.error;
        console.info = xdnOriginalConsole.info;
        console.log = xdnOriginalConsole.log;
        console.time = xdnOriginalConsole.time;
        console.timeEnd = xdnOriginalConsole.timeEnd;
        console.timeLog = xdnOriginalConsole.timeLog;
        console.trace = xdnOriginalConsole.trace;
        console.warn = xdnOriginalConsole.warn;
    };
    return ConsoleWrapper;
}());
exports.default = ConsoleWrapper;
