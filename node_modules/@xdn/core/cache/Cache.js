"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lru_cache_1 = __importDefault(require("lru-cache"));
var environment_1 = require("../environment");
var constants_1 = require("../constants");
var cache;
/**
 * Must be running locally with XDN_CACHE environment variable set.
 */
function isCacheEnabled() {
    return !environment_1.isCloud() && process.env.XDN_CACHE === 'true';
}
exports.isCacheEnabled = isCacheEnabled;
/**
 * Gets the singleton instance of the development response cache
 */
function getCache() {
    assertNotCloud();
    if (!cache) {
        cache = new lru_cache_1.default();
    }
    return cache;
}
exports.getCache = getCache;
/**
 * Evicts all entries from the cache
 */
function clearCache() {
    getCache().reset();
}
exports.clearCache = clearCache;
/**
 * Returns the cached response for the specified key
 * @param key The cache key
 */
function getCachedResponse(key) {
    return getCache().get(key);
}
exports.getCachedResponse = getCachedResponse;
/**
 * Throws an error if we're in the cloud.
 * We only need a cache locally and should not use it in the cloud since we
 * have the edge.
 */
function assertNotCloud() {
    if (environment_1.isCloud()) {
        throw new Error('The development cache should not be used in the cloud.');
    }
}
/**
 * Writes the response to the cache if x-xdn-cache-control has a non-zero max-age value.
 */
function maybeCacheResponse(_a) {
    var request = _a.request, response = _a.response, cacheKey = _a.cacheKey, context = _a.context;
    var _b;
    var method = (_b = request.method) === null || _b === void 0 ? void 0 : _b.toLowerCase();
    if (method && !constants_1.CACHEABLE_METHODS.has(method) && context.cacheRouteMethod !== method) {
        // POSTs should only be cached when the route explicitly defines the method criteria as POST
        response.setHeader(constants_1.HTTP_HEADERS.xXdnCachingStatus, constants_1.CACHING_STATUS.method);
        return false;
    }
    else if (request.body && Buffer.from(request.body, 'utf8').length > 8000) {
        // here we ensure that we're counting bytes by reading the string as utf8, which is a single byte per character
        // The 8000 character limit is the maximum size fastly can read from the request body
        response.setHeader(constants_1.HTTP_HEADERS.xXdnCachingStatus, constants_1.CACHING_STATUS.bodyTooBig);
        return false;
    }
    else if (response.statusCode && response.statusCode >= 400) {
        // we don't cache statuses 400 and above
        response.setHeader(constants_1.HTTP_HEADERS.xXdnCachingStatus, constants_1.CACHING_STATUS.code);
        return false;
    }
    else if (response.getHeader('set-cookie')) {
        // we don't cache responses with set-cookie headers as they may contain personal data
        response.setHeader(constants_1.HTTP_HEADERS.xXdnCachingStatus, constants_1.CACHING_STATUS.setCookie);
        return false;
    }
    var cacheParams = getCacheParams(response);
    if (cacheParams.private && !context.forcePrivateCaching) {
        response.setHeader(constants_1.HTTP_HEADERS.xXdnCachingStatus, constants_1.CACHING_STATUS.private);
        return false;
    }
    else if (cacheParams.maxAge) {
        getCache().set(cacheKey, response, cacheParams.maxAge * 1000);
        response.setHeader(constants_1.HTTP_HEADERS.xXdnCachingStatus, constants_1.CACHING_STATUS.ok);
        return true;
    }
    else {
        response.setHeader(constants_1.HTTP_HEADERS.xXdnCachingStatus, constants_1.CACHING_STATUS.noMaxAge);
        return false;
    }
}
exports.maybeCacheResponse = maybeCacheResponse;
/**
 * Gets the effective caching settings for the response
 * @param response The current response
 */
function getCacheParams(response) {
    var defaults = {
        private: false,
        maxAge: 0,
    };
    return __assign(__assign(__assign({}, defaults), getCacheParamsFromHeader(response.getHeader(constants_1.HTTP_HEADERS.cacheControl))), getCacheParamsFromHeader(response.getHeader(constants_1.HTTP_HEADERS.xXdnCacheControl)));
}
/**
 * Extracts private and max-age/s-maxage from a cache-control header
 * @param cacheControl
 */
function getCacheParamsFromHeader(cacheControl) {
    var e_1, _a, e_2, _b;
    var result = {};
    if (cacheControl) {
        if (!Array.isArray(cacheControl)) {
            cacheControl = [cacheControl];
        }
        var values = {};
        try {
            for (var cacheControl_1 = __values(cacheControl), cacheControl_1_1 = cacheControl_1.next(); !cacheControl_1_1.done; cacheControl_1_1 = cacheControl_1.next()) {
                var header = cacheControl_1_1.value;
                var pairs = header.split(/,\s*/).map(function (v) { return v.split(/=/); });
                try {
                    for (var pairs_1 = (e_2 = void 0, __values(pairs)), pairs_1_1 = pairs_1.next(); !pairs_1_1.done; pairs_1_1 = pairs_1.next()) {
                        var _c = __read(pairs_1_1.value, 2), name_1 = _c[0], value = _c[1];
                        values[name_1.toLowerCase()] = value;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (pairs_1_1 && !pairs_1_1.done && (_b = pairs_1.return)) _b.call(pairs_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                if (values.hasOwnProperty('private')) {
                    result.private = true;
                }
                result.maxAge = parseInt(values['s-maxage'] || values['max-age'] || '0');
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (cacheControl_1_1 && !cacheControl_1_1.done && (_a = cacheControl_1.return)) _a.call(cacheControl_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return result;
}
