import Request from '../router/Request';
import { CustomCacheKey } from '../router';
/**
 * An actual cache key derived from a request per the user's CustomCacheKey specification
 */
export default class CacheKey {
    body?: string;
    method?: string;
    pathname: string;
    query: {
        [key: string]: string | string[] | undefined;
    };
    headers: {
        [key: string]: string | string[];
    };
    cookies: {
        [key: string]: string | string[];
    };
    static create(request: Request, customKey?: CustomCacheKey): string;
    constructor(request: Request, customKey?: CustomCacheKey);
    /**
     * We always ignore xdn_* query params when computing the cache key so that things like xdn_prefetch don't cache bust
     * @param query
     */
    excludeXDNQueryParams(query: {
        [name: string]: string | string[] | undefined;
    }): {
        [name: string]: string | string[] | undefined;
    };
    /**
     * Returns an array of values in the object sorted by the key
     * We sort query params so that different orderings will result in a hit
     * @param source Any object of key/value pairs, e.g. query, headers, cookies, etc...
     */
    toSortedArray(source: {
        [name: string]: any;
    }): any[][];
    toString(): string;
}
