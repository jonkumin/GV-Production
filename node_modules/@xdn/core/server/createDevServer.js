"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore file */
var path_1 = require("path");
var constants_1 = require("../constants");
var http_1 = require("http");
var serveStatic_1 = __importDefault(require("./serveStatic"));
var webpack_dev_middleware_1 = __importDefault(require("webpack-dev-middleware"));
var bundle_1 = require("../deploy/bundle");
var express_1 = __importDefault(require("express"));
var loadRouter_1 = __importDefault(require("../router/loadRouter"));
var chalk_1 = __importDefault(require("chalk"));
var Cache_1 = require("../cache/Cache");
var timing_1 = require("../timing");
var logo_1 = __importDefault(require("../utils/logo"));
function createDevServer(param1, param2) {
    var _this = this;
    var JSBackendType, options;
    if (typeof param1 === 'function') {
        JSBackendType = param1;
        options = param2;
    }
    else {
        JSBackendType = undefined;
        options = param1;
    }
    var _a = (options || {}).port, port = _a === void 0 ? parseInt(process.env.PORT || '3000', 10) : _a;
    var jsPort = (options === null || options === void 0 ? void 0 : options.jsPort) || port + 1;
    var assetPort = port + 2;
    // @ts-ignore
    var assetServer = http_1.createServer(serveStatic_1.default);
    var xdn = express_1.default();
    var compiler = bundle_1.createCompiler();
    xdn.use(webpack_dev_middleware_1.default(compiler, {
        stats: 'errors-only',
        logLevel: 'info',
        writeToDisk: true,
        publicPath: path_1.join(process.cwd(), '.xdn', 's3'),
    }));
    var loadAndConfigureRouter = function () {
        var router = loadRouter_1.default(bundle_1.ROUTER_DESTINATION);
        router.setBackend(constants_1.BACKENDS.static, { domainOrIp: '127.0.0.1', port: assetPort });
        if (jsPort) {
            router.setBackend(constants_1.BACKENDS.js, { domainOrIp: '127.0.0.1', port: jsPort });
        }
        return router;
    };
    var router;
    var routerReady = new Promise(function (resolve, reject) {
        compiler.hooks.beforeCompile.tap('xdn', function () { });
        compiler.hooks.afterEmit.tap('xdn', function () {
            Cache_1.clearCache();
            // Ensure that the router is reloaded when a new version is compiled
            // Note: there is a known memory leak here, but if we only reload the router when the user changes it,
            // the memory growth will be slow enough to not be noticeable in most cases.
            try {
                delete require.cache[bundle_1.ROUTER_DESTINATION];
                router = loadAndConfigureRouter();
                resolve();
            }
            catch (e) {
                reject(e);
            }
        });
    });
    // `router` will always be initialized as the middleware will stop incoming requests until build is done.
    xdn.use(function (req, res) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, routerReady];
                case 1:
                    _a.sent();
                    timing_1.resetTimings();
                    // @ts-ignore TypeScript complains here because our Request and Response objects don't exactly match express's
                    router.run(req, res);
                    return [2 /*return*/];
            }
        });
    }); });
    var promises = [
        routerReady,
        new Promise(function (resolve, reject) {
            try {
                xdn.listen(port, resolve);
            }
            catch (e) {
                reject(e);
            }
        }),
        new Promise(function (resolve, reject) {
            try {
                assetServer.listen(assetPort, resolve);
            }
            catch (e) {
                reject(e);
            }
        }),
    ];
    if (JSBackendType) {
        promises.push(new JSBackendType(jsPort).start());
    }
    return Promise.all(promises)
        .then(function () {
        console.log('\n' +
            logo_1.default +
            ' ' +
            chalk_1.default.green("ready on " + chalk_1.default.bold(chalk_1.default.underline("http://127.0.0.1:" + port + "\n"))));
    })
        .catch(function (err) { return console.log('error', err); });
}
exports.default = createDevServer;
