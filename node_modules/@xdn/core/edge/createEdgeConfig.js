"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __importDefault(require("../config"));
var toEdgeRegex_1 = __importDefault(require("../utils/toEdgeRegex"));
var toHttpMethodMatchRegex_1 = __importDefault(require("../utils/toHttpMethodMatchRegex"));
var EdgeResponseWriter_1 = __importDefault(require("./EdgeResponseWriter"));
var constants_1 = require("../constants");
var RequestContext_1 = __importDefault(require("../router/RequestContext"));
/**
 * Returns cache object
 *
 * Notes:
 * - Method caching is only allowed when it's explicit:
 * 1. The matching was explicitly done on `post` and other methods and
 * 2. The caching properties were defined on the same route.
 *
 * @param {EdgeResponseWriter} edgeWrapper
 * @private
 */
function buildRouteCacheKeysFromEdgeWriter(_a, matchExplicitMethod) {
    var edgeConfig = _a.edgeConfig;
    var _b, _c;
    // istanbul ignore next - edgeConfig.cache?.maxAgeSeconds is apparently untestable as it always shows as uncovered
    if (edgeConfig.cache && ((_b = edgeConfig.cache) === null || _b === void 0 ? void 0 : _b.maxAgeSeconds) &&
        ((_c = edgeConfig.cache) === null || _c === void 0 ? void 0 : _c.maxAgeSeconds) > 0 &&
        matchExplicitMethod) {
        return __assign(__assign({}, edgeConfig.cache), { matchExplicitMethod: matchExplicitMethod });
    }
    return edgeConfig.cache;
}
/**
 * Returns route action
 * @param {EdgeResponseWriter} edgeWrapper
 * @private
 */
function buildRouteActionFromEdgeWriter(_a) {
    var edgeConfig = _a.edgeConfig;
    return edgeConfig.route;
}
/**
 * Returns transformation object
 * @param {EdgeResponseWriter} edgeWrapper
 * @private
 */
function buildTransformFromEdgeWriter(_a) {
    var edgeConfig = _a.edgeConfig;
    return edgeConfig.transform;
}
/**
 * Build Outer Edge match configuration
 *
 * Notes:
 * - When resulting array is empty, it means that all requests should match
 * - If method matching is set to explicit method then set it in `matchExplicitMethod`
 *
 * @param {Route} route
 * @returns {Object[]} An array of match criteria
 * @private
 */
function buildMatcherFromRoute(route) {
    var match = [];
    var matchExplicitMethod;
    if (route.criteria.path) {
        match.push({
            value: '${path}',
            matchRegex: route.toEdgeRegexString(),
        });
    }
    if (route.criteria.method) {
        var matchRegex = void 0;
        if (typeof route.criteria.method !== 'string') {
            matchRegex = route.criteria.method;
        }
        else {
            matchRegex = toHttpMethodMatchRegex_1.default(route.criteria.method);
            if (Object.values(constants_1.HTTP_METHODS).includes(route.criteria.method)) {
                matchExplicitMethod = route.criteria.method;
            }
        }
        match.push({
            value: '${method}',
            matchRegex: toEdgeRegex_1.default(matchRegex),
        });
    }
    if (route.criteria.headers) {
        Object.entries(route.criteria.headers).forEach(function (_a) {
            var _b = __read(_a, 2), name = _b[0], value = _b[1];
            match.push({
                value: "${req:" + name + "}",
                matchRegex: toEdgeRegex_1.default(value),
            });
        });
    }
    if (route.criteria.query) {
        Object.entries(route.criteria.query).forEach(function (_a) {
            var _b = __read(_a, 2), name = _b[0], value = _b[1];
            match.push({
                value: "${query:" + name + "}",
                matchRegex: toEdgeRegex_1.default(value),
            });
        });
    }
    if (route.criteria.cookies) {
        Object.entries(route.criteria.cookies).forEach(function (_a) {
            var _b = __read(_a, 2), name = _b[0], value = _b[1];
            match.push({
                value: "${req:cookie:" + name + "}",
                matchRegex: toEdgeRegex_1.default(value),
            });
        });
    }
    return {
        match: match,
        matchExplicitMethod: matchExplicitMethod,
    };
}
/**
 * Creates an outer edge manager config for the specified router by iterating through
 * each route and calling it with a mock request
 * and response.
 * @param {Router} router
 * @return {EdgeConfig} An object containing the Edge config
 */
function createEdgeConfig(router) {
    return __awaiter(this, void 0, void 0, function () {
        var destinations, _a, _b, _c, _i, d, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    destinations = {};
                    if (!!Object.keys(router.getDestinations()).length) return [3 /*break*/, 2];
                    _a = {};
                    return [4 /*yield*/, createDestination(router)];
                case 1:
                    destinations = (_a.default = _f.sent(),
                        _a);
                    return [3 /*break*/, 6];
                case 2:
                    _b = [];
                    for (_c in router.getDestinations())
                        _b.push(_c);
                    _i = 0;
                    _f.label = 3;
                case 3:
                    if (!(_i < _b.length)) return [3 /*break*/, 6];
                    d = _b[_i];
                    _d = destinations;
                    _e = d;
                    return [4 /*yield*/, createDestination(router.getDestinations()[d])];
                case 4:
                    _d[_e] = _f.sent();
                    _f.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 3];
                case 6: return [2 /*return*/, {
                        version: getXdnVersion(),
                        backends: __assign({}, config_1.default.get('backends')),
                        destinations: destinations,
                    }];
            }
        });
    });
}
exports.default = createEdgeConfig;
/**
 * Gets the version of @xdn/core.  For this to work in testing an entry needed
 * to be added to moduleNameMapper in the jest config specifically for package.json
 * @return {String}
 */
function getXdnVersion() {
    // We purposefully don't override this version so that we can see in edge
    // responses the *exact* version with which the edge was built.
    return require('../package.json').version;
}
function createDestination(router) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = {
                        index: router.index
                    };
                    return [4 /*yield*/, Promise.all(router
                            .getRouteGroups()
                            .getRoutes()
                            .map(function (route) { return __awaiter(_this, void 0, void 0, function () {
                            var writer, _a, match, matchExplicitMethod;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        writer = new EdgeResponseWriter_1.default({
                                            url: '',
                                            headers: {},
                                        }, {}, route, new RequestContext_1.default());
                                        // @ts-ignore
                                        return [4 /*yield*/, route.handler(writer)];
                                    case 1:
                                        // @ts-ignore
                                        _b.sent();
                                        _a = buildMatcherFromRoute(route), match = _a.match, matchExplicitMethod = _a.matchExplicitMethod;
                                        return [2 /*return*/, {
                                                // used when building .xdn to assemble the s3 directory structure
                                                path: route.criteria.path,
                                                // Consumed by Cache metrics to build the route string
                                                routeJson: route.toJson(),
                                                match: match,
                                                cache: buildRouteCacheKeysFromEdgeWriter(writer, matchExplicitMethod),
                                                route: buildRouteActionFromEdgeWriter(writer),
                                                transform: buildTransformFromEdgeWriter(writer),
                                            }];
                                }
                            });
                        }); }))];
                case 1: return [2 /*return*/, (_a.routes = _b.sent(),
                        _a)];
            }
        });
    });
}
