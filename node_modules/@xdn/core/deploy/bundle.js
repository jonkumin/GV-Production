"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __importDefault(require("../config"));
var webpack_1 = __importDefault(require("webpack"));
var path_1 = require("path");
var paths_1 = require("./paths");
var loadRouter_1 = __importDefault(require("../router/loadRouter"));
var get_1 = __importDefault(require("lodash/get"));
var destDir = path_1.join(process.cwd(), paths_1.JS_DIR);
/**
 * Compiles the router and xdn.config.js in production mode.
 * Returns a promise that resolves to the router.
 */
function bundle() {
    return __awaiter(this, void 0, void 0, function () {
        var routes, webpackConfig, webpackStats;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    routes = config_1.default.get('routes');
                    // Use process.stdout.write to be able to concatenate `done.` to the same output line.
                    process.stdout.write("> Bundling " + routes + " and xdn.config.js... ");
                    webpackConfig = createConfig({ mode: 'production' });
                    return [4 /*yield*/, new Promise(function (resolve, reject) {
                            webpack_1.default(webpackConfig, function (err, stats) { return err ? reject(err) : resolve(stats); });
                        })];
                case 1:
                    webpackStats = _a.sent();
                    if (get_1.default(webpackStats, 'compilation.errors.length')) {
                        console.error('Errors occurred while bundling your router:', get_1.default(webpackStats, 'compilation.errors'));
                        throw new Error('Bundling router failed.');
                    }
                    process.stdout.write('done.\n');
                    return [2 /*return*/, loadRouter_1.default(exports.ROUTER_DESTINATION)];
            }
        });
    });
}
exports.default = bundle;
/**
 * Creates a webpack compiler for bundling the router in development.
 * @private
 */
function createCompiler() {
    return webpack_1.default(createConfig());
}
exports.createCompiler = createCompiler;
/**
 * Creates a webpack config for bundling the router
 * @private
 */
function createConfig(webpackConfig) {
    var routesPath = path_1.join(process.cwd(), config_1.default.get('routes'));
    var configPath = path_1.join(process.cwd(), 'xdn.config.js');
    var rules = [];
    try {
        // skip ts-loader if typescript is not installed in the project
        require.resolve('typescript');
        rules.push({
            test: /\.ts$/,
            use: [
                {
                    loader: 'ts-loader',
                    options: {
                        compilerOptions: {
                            noEmit: false,
                        },
                    },
                },
            ],
            exclude: /node_modules/,
        });
    }
    catch (e) { }
    try {
        // skip babel-loader if babel is not installed in the project
        require.resolve('@babel/core');
        rules.push({
            test: /\.js$/,
            use: 'babel-loader',
            exclude: /node_modules/,
        });
    }
    catch (e) { }
    return __assign({ stats: 'errors-only', entry: {
            routes: routesPath,
            'xdn.config': configPath,
        }, output: {
            filename: '[name].js',
            path: destDir,
            libraryTarget: 'umd',
        }, module: {
            rules: rules,
        }, resolve: {
            extensions: ['.ts', '.js'],
        }, target: 'node', mode: 'development' }, webpackConfig);
}
/**
 * @private
 */
exports.ROUTER_DESTINATION = path_1.join(destDir, paths_1.ROUTES_FILE_NAME);
