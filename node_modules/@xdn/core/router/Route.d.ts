import Request from './Request';
import { MatchFunction } from 'path-to-regexp';
import { RouteCriteria, RouteHandler } from './Router';
/**
 * @private
 */
export default class Route {
    readonly criteria: RouteCriteria;
    readonly matcher?: MatchFunction;
    readonly handler: RouteHandler;
    /**
     * Creates a new Route
     * @param criteria A string or an object with `path`, `headers`, and `method`.
     * @param handler A route handler
     */
    constructor(criteria: string | RouteCriteria | null, handler: RouteHandler);
    /**
     * Returns params if route matches the request's method, headers, cookies and path.
     * @param req
     * @return The path params if the route matches the current request, otherwise false
     */
    match(req: Request): false | {
        [key: string]: string;
    };
    private matchPath;
    private matchMethod;
    /**
     * Ensures that the regular expression will be tested anew, without changing its internal state.
     *
     * Notes:
     * - Sometimes users use global for RegExp definitions. In those cases `.test` changes the internal
     * state and leads to different requests on subsequent calls (usually flip-flopping between
     * subsequent requests)
     *
     * @param regexp Regular expression
     * @param value Value to test or array of values to test
     */
    private static testRegExp;
    private matchHeaders;
    private matchQueryParams;
    private matchCookies;
    toString(): string;
    toRegex(): RegExp;
    /**
     * Returns criteria json
     * This is consumed by cache metrics that will transform the route to be as similar as in routes file
     */
    toJson(): string;
    /**
     * Returns a string with the regex representation of the route.
     * @returns Regexp string representation of the route
     */
    toRegexString(): string;
    /**
     * Returns a regex string compatible with the edge regular express parser
     */
    toEdgeRegexString(): string;
    /**
     * Compares criteria object with request object and returns Boolean
     *
     * @param criteriaObj Object that contains the criteria ([key]: regex)
     * @param requestObj Request object that contains ([key]: string | [key]: string[] | undefined)
     *
     * @returns Boolean
     * true when all conditions are matching
     * false if one of the conditions failed
     */
    static matchCriteriaRegexObjectWithRequestObject(criteriaObj: {
        [name: string]: RegExp;
    }, requestObj: {
        [key: string]: string | string[] | undefined;
    }): boolean;
}
