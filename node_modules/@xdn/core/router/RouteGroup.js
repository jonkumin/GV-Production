"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Route_1 = __importDefault(require("./Route"));
var Cache_1 = require("../cache/Cache");
var environment_1 = require("../environment");
var path_1 = require("path");
var glob_1 = __importDefault(require("glob"));
/**
 * The contents to be written to static-asset-manifest.json
 * @private
 */
exports.staticAssetManifest = {};
/**
 * The static asset manifest file name
 * @private
 */
exports.STATIC_ASSET_MANIFEST_FILE = 'static-asset-manifest.json';
/**
 * This class is needed for creating a route group that holds a routes that can
 * be dynamically updated on a local env.
 * @private
 */
var RouteGroup = /** @class */ (function () {
    /**
     * @param name Name of the route group - **required**
     */
    function RouteGroup(name) {
        this._routes = [];
        if (!name) {
            throw new Error('Route group name is required!');
        }
        this.name = name;
    }
    /**
     * Adds route to group.
     * @param criteria The criteria to match.
     * @param handler The handler to use for the route.
     */
    RouteGroup.prototype.match = function (criteria, handler) {
        var route = new Route_1.default(criteria, handler);
        this._routes.push(route);
        return this;
    };
    /**
     * Adds routes for all files in a directory tree.
     * @private
     * @param sourcePath The path to a directory containing static assets relative to the root of your project.
     * @param options
     * @returns A self-reference, suitable for chaining.
     */
    RouteGroup.prototype.dir = function (sourcePath, options) {
        var e_1, _a;
        var _this = this;
        var directory = path_1.join(process.cwd(), sourcePath);
        var manifest = (exports.staticAssetManifest[sourcePath] = []);
        var files = environment_1.isCloud()
            ? this.staticAssetsForPath(sourcePath)
            : glob_1.default.sync(options.glob || '**/*', {
                cwd: directory,
                nodir: true,
                ignore: options.ignore,
            });
        if (options.sort) {
            files = options.sort(files);
        }
        var _loop_1 = function (file) {
            var e_2, _a;
            var paths = (options.paths && options.paths(file)) || ["/" + file];
            if (!environment_1.isCloud()) {
                manifest.push(file);
            }
            try {
                for (var paths_1 = (e_2 = void 0, __values(paths)), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
                    var path = paths_1_1.value;
                    this_1.match(path, function (res) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            options.handler && options.handler(file)(res);
                            return [2 /*return*/];
                        });
                    }); });
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        var this_1 = this;
        try {
            for (var files_1 = __values(files), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {
                var file = files_1_1.value;
                _loop_1(file);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (files_1_1 && !files_1_1.done && (_a = files_1.return)) _a.call(files_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this;
    };
    /**
     * Adds routes for all static assets in a directory tree.
     * @param sourcePath The path to a directory containing static assets relative to the root of your project.
     * @param options
     * @returns A self-reference, suitable for chaining.
     */
    RouteGroup.prototype.static = function (sourcePath, options) {
        var handler = function (file) { return function (res) {
            if (options.handler) {
                options.handler(file)(res);
            }
            res.serveStatic(sourcePath + "/" + file);
        }; };
        return this.dir(sourcePath, __assign(__assign({}, options), { handler: handler }));
    };
    /**
     * Since the files are now on S3, we can no longer crawl the file system to
     * determine the routes, so we use the manifest file
     * we use eval('require') to prevent webpack from trying to bundle the manifest, which will fail
     */
    RouteGroup.prototype.staticAssetsForPath = function (path) {
        return eval('require')(path_1.join(process.cwd(), exports.STATIC_ASSET_MANIFEST_FILE))[path];
    };
    /**
     * Clears all routes in group.
     * Used for updating routes dynamically for development purpose.
     */
    RouteGroup.prototype.clear = function () {
        this._routes = [];
        if (!environment_1.isCloud()) {
            Cache_1.clearCache();
        }
        return this;
    };
    Object.defineProperty(RouteGroup.prototype, "routes", {
        /**
         * Returns the routes in group.
         * @returns Routes in group
         */
        get: function () {
            return this._routes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouteGroup.prototype, "length", {
        /**
         * Returns number of routes in group.
         * @returns Number of routes in the group.
         */
        get: function () {
            return this._routes.length;
        },
        enumerable: true,
        configurable: true
    });
    return RouteGroup;
}());
exports.default = RouteGroup;
