"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ResponseWriter_1 = __importDefault(require("./ResponseWriter"));
/**
 * Response writer used then core router is not on the edge.
 *
 * Notes:
 * - We need this to avoid running header and other transformations on
 * both edge and in the cloud. We do this by overriding the ResponseWriter
 * header transformation methods to noop.
 *
 * @private
 */
var BehindEdgeResponseWriter = /** @class */ (function (_super) {
    __extends(BehindEdgeResponseWriter, _super);
    function BehindEdgeResponseWriter(req, res, route, context) {
        var _this = _super.call(this, req, res, route, context) // istanbul ignore next - this is a known issue with TypeScript
         || this;
        _this.setRequestHeader = function (name, value) { };
        _this.updateRequestHeader = function (name, match, replace) { };
        _this.removeRequestHeader = function (name) { };
        _this.setResponseHeader = function (name, value) { };
        _this.updateResponseHeader = function (name, match, replace) { };
        _this.removeResponseHeader = function (name) { };
        _this.setUpstreamResponseHeader = function (name, value) { };
        _this.updateUpstreamResponseHeader = function (name, match, replace) { };
        _this.removeUpstreamResponseHeader = function (name) { };
        _this.addResponseCookie = function (name, value) { };
        _this.updateResponseCookie = function (name, match, replace) { };
        _this.removeResponseCookie = function (name) { };
        _this.addUpstreamResponseCookie = function (name, value) { };
        _this.updateUpstreamResponseCookie = function (name, match, replace) { };
        _this.removeUpstreamResponseCookie = function (name) { };
        return _this;
    }
    return BehindEdgeResponseWriter;
}(ResponseWriter_1.default));
exports.default = BehindEdgeResponseWriter;
